#!/usr/bin/env bash

# yadm bootstrap script
# This script runs once after yadm clone or yadm bootstrap
# It sets up a complete development environment using Homebrew

set -e # Exit immediately if a command exits with a non-zero status
set -u # Exit if an unset variable is used
set -o pipefail

# Colors for better output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
log_info() {
  echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
  echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warn() {
  echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
  echo -e "${RED}[ERROR]${NC} $1"
}

# Detect operating system
OS="$(uname -s)"
log_info "Detected OS: $OS"

# Check if Homebrew is installed, install if not
if ! command -v brew &> /dev/null; then
  log_info "Homebrew not found. Installing..."
  if [[ "$OS" == "Darwin" ]]; then
    # macOS
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    
    # Add Homebrew to path based on architecture
    if [[ "$(uname -m)" == "arm64" ]]; then
      # M1/M2 Mac
      echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
      eval "$(/opt/homebrew/bin/brew shellenv)"
    else
      # Intel Mac
      echo 'eval "$(/usr/local/bin/brew shellenv)"' >> ~/.zprofile
      eval "$(/usr/local/bin/brew shellenv)"
    fi
  else
    # Linux
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    
    # Add Homebrew to PATH
    test -d ~/.linuxbrew && eval "$(~/.linuxbrew/bin/brew shellenv)"
    test -d /home/linuxbrew/.linuxbrew && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
    
    # Add to .zprofile for persistence
    echo "eval \"\$($(brew --prefix)/bin/brew shellenv)\"" >> ~/.zprofile
  fi
  log_success "Homebrew installed successfully!"
else
  log_info "Homebrew already installed, updating..."
  brew update
fi

# Install packages from Brewfile
log_info "Installing packages from Brewfile..."
if [ -f "$HOME/homebrew/Brewfile" ]; then
  brew bundle install --file="$HOME/homebrew/Brewfile"
  log_success "Packages installed successfully!"
else
  log_error "Brewfile not found at ~/homebrew/Brewfile"
  exit 1
fi

# Setup Starship prompt
if command -v starship &> /dev/null; then
  log_info "Setting up Starship prompt..."
  mkdir -p ~/.config
  starship preset plain-text-symbols > ~/.config/starship.toml
  log_success "Starship prompt configured!"
fi

# Setup zoxide
if command -v zoxide &> /dev/null; then
  log_info "Setting up zoxide..."
  # Add to shell initialization
  echo 'eval "$(zoxide init zsh)"' >> ~/.zshrc.local
  log_success "zoxide configured!"
fi

# Setup Atuin
if command -v atuin &> /dev/null; then
  log_info "Setting up Atuin shell history..."
  # Initialize Atuin
  atuin init zsh > ~/.zsh_atuin
  echo 'source ~/.zsh_atuin' >> ~/.zshrc.local
  log_success "Atuin shell history configured!"
fi

# Setup FNM (Fast Node Manager)
if command -v fnm &> /dev/null; then
  log_info "Setting up fnm..."
  echo 'eval "$(fnm env --use-on-cd)"' >> ~/.zshrc.local
  log_success "fnm configured!"
fi

# Create local bin directory if it doesn't exist
if [ ! -d "$HOME/.local/bin" ]; then
  log_info "Creating ~/.local/bin directory..."
  mkdir -p "$HOME/.local/bin"
  echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.zshrc.local
  log_success "Local bin directory created!"
fi

# Generate SSH key if none exists
if [ ! -f "$HOME/.ssh/id_ed25519" ]; then
  log_info "No SSH key found, generating one..."
  mkdir -p "$HOME/.ssh"
  ssh-keygen -t ed25519 -C "$(whoami)@$(hostname)" -f "$HOME/.ssh/id_ed25519" -N ""
  chmod 700 "$HOME/.ssh"
  chmod 600 "$HOME/.ssh/id_ed25519"
  chmod 644 "$HOME/.ssh/id_ed25519.pub"
  log_success "SSH key generated!"
  
  # Setup SSH config with sensible defaults if it doesn't exist
  if [ ! -f "$HOME/.ssh/config" ]; then
    log_info "Creating SSH config with sensible defaults..."
    cat > "$HOME/.ssh/config" << EOL
Host *
  AddKeysToAgent yes
  IdentityFile ~/.ssh/id_ed25519
  HashKnownHosts yes
  ServerAliveInterval 60
EOL
    chmod 600 "$HOME/.ssh/config"
    log_success "SSH config created!"
  fi
  
  # Encrypt sensitive files with yadm
  log_info "Setting up yadm encryption for sensitive files..."
  echo ".ssh/id_ed25519" >> "$HOME/.config/yadm/encrypt"
  echo ".ssh/config" >> "$HOME/.config/yadm/encrypt"
  yadm encrypt
  log_success "yadm encryption configured!"
fi

# Create .gitconfig if it doesn't exist
if [ ! -f "$HOME/.gitconfig" ]; then
  log_info "Creating a basic .gitconfig..."
  cat > "$HOME/.gitconfig" << EOL
[user]
  name = $(whoami)
  email = $(whoami)@$(hostname)
[core]
  editor = vim
  excludesFile = ~/.gitignore
  pager = delta
[init]
  defaultBranch = main
[pull]
  rebase = false
[push]
  default = simple
[color]
  ui = auto
[alias]
  s = status
  co = checkout
  cb = checkout -b
  cm = commit -m
  ca = commit --amend
  aa = add -A
  lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
[delta]
  line-numbers = true
  side-by-side = false
  navigate = true
EOL
  log_success ".gitconfig created! Remember to update your name and email."
fi

# Create .zshrc.local if it doesn't exist
if [ ! -f "$HOME/.zshrc.local" ]; then
  log_info "Creating .zshrc.local file for custom zsh configurations..."
  cat > "$HOME/.zshrc.local" << EOL
# This file is sourced by .zshrc
# Add your custom configurations here

# Set default editor
export EDITOR="vim"
export VISUAL="vim"

# Enhanced terminal colors
export TERM="xterm-256color"

# Better directory listing
if command -v eza &> /dev/null; then
  alias ls="eza --icons"
  alias ll="eza -l --icons --git"
  alias la="eza -la --icons --git"
  alias lt="eza -T --icons"
fi

# Better cat command
if command -v bat &> /dev/null; then
  alias cat="bat --style=plain"
fi

# Better find
if command -v fd &> /dev/null; then
  alias find="fd"
fi

# Better grep
if command -v rg &> /dev/null; then
  alias grep="rg"
fi

# Useful aliases
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias c="clear"
alias h="history"
alias mkdir="mkdir -p"

# Enable autosuggestions
if [ -f /usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh ]; then
  source /usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh
elif [ -f /opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh ]; then
  source /opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh
elif [ -f /home/linuxbrew/.linuxbrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh ]; then
  source /home/linuxbrew/.linuxbrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh
fi

# Enable syntax highlighting
if [ -f /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]; then
  source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
elif [ -f /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]; then
  source /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
elif [ -f /home/linuxbrew/.linuxbrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]; then
  source /home/linuxbrew/.linuxbrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

# Activate direnv
if command -v direnv &> /dev/null; then
  eval "\$(direnv hook zsh)"
fi

# Activate thefuck
if command -v thefuck &> /dev/null; then
  eval "\$(thefuck --alias)"
fi
EOL
  log_success ".zshrc.local created!"
fi

# Create basic .zshrc file if it doesn't exist or update existing one
if [ ! -f "$HOME/.zshrc" ]; then
  log_info "Creating new .zshrc file..."
  cat > "$HOME/.zshrc" << EOL
# Base zsh configuration

# History settings
HISTFILE=\$HOME/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt appendhistory
setopt hist_ignore_dups
setopt hist_ignore_space

# Basic zsh settings
setopt autocd
setopt extendedglob
setopt nomatch
setopt notify
unsetopt beep

# Keybindings
bindkey -e  # Use emacs key bindings

# Basic autocompletion
autoload -Uz compinit
compinit

# Completion options
zstyle ':completion:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'

# Load local configurations if available
[[ -f \$HOME/.zshrc.local ]] && source \$HOME/.zshrc.local

# Initialize starship if installed
if command -v starship &> /dev/null; then
  eval "\$(starship init zsh)"
fi
EOL
  log_success ".zshrc created!"
else
  log_info "Existing .zshrc found, making sure local config is sourced..."
  if ! grep -q "\.zshrc\.local" "$HOME/.zshrc"; then
    echo '[[ -f $HOME/.zshrc.local ]] && source $HOME/.zshrc.local' >> "$HOME/.zshrc"
    log_success "Added .zshrc.local sourcing to .zshrc"
  fi
  
  if ! grep -q "starship init" "$HOME/.zshrc"; then
    echo 'if command -v starship &> /dev/null; then' >> "$HOME/.zshrc"
    echo '  eval "$(starship init zsh)"' >> "$HOME/.zshrc"
    echo 'fi' >> "$HOME/.zshrc"
    log_success "Added starship initialization to .zshrc"
  fi
fi

# Basic Neovim configuration
if command -v nvim &> /dev/null; then
  log_info "Setting up basic Neovim configuration..."
  mkdir -p "$HOME/.config/nvim"
  cat > "$HOME/.config/nvim/init.vim" << EOL
" Basic Neovim Configuration

" Display settings
set number                " Show line numbers
set relativenumber        " Show relative line numbers
set cursorline            " Highlight current line
set showmatch             " Highlight matching brackets
set signcolumn=yes        " Always show sign column
set scrolloff=8           " Start scrolling when 8 lines from the bottom
set termguicolors         " Enable true color support

" Text and editing settings
set expandtab             " Use spaces instead of tabs
set shiftwidth=2          " One tab = 2 spaces
set tabstop=2             " One tab = 2 spaces
set softtabstop=2         " One tab = 2 spaces
set autoindent            " Auto indent
set smartindent           " Smart indent
set wrap                  " Wrap lines
set linebreak             " Break lines at word

" Search settings
set ignorecase            " Case insensitive search
set smartcase             " Case sensitive when uppercase present
set hlsearch              " Highlight search results
set incsearch             " Show matches while typing

" System settings
set hidden                " Allow hidden buffers
set noswapfile            " Don't use swapfile
set nobackup              " Don't create backup files
set undofile              " Persistent undo
set undodir=~/.config/nvim/undodir  " Undo directory
set updatetime=300        " Faster completion
set timeoutlen=500        " By default timeoutlen is 1000ms

" Key mappings
let mapleader = " "       " Set leader key to space

" Basic mappings
nnoremap <leader>w :w<CR>
nnoremap <leader>q :q<CR>
nnoremap <leader>e :e 

" Buffer navigation
nnoremap <leader>bn :bnext<CR>
nnoremap <leader>bp :bprevious<CR>

" Window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Clear search highlighting
nnoremap <leader>c :noh<CR>
EOL
  mkdir -p "$HOME/.config/nvim/undodir"
  log_success "Basic Neovim configuration created!"
fi

log_success "Bootstrap completed successfully!"
log_info "Remember to restart your shell or run 'source ~/.zshrc' to apply changes."
log_info "To setup a git remote for your dotfiles, run: yadm remote add origin <your-repo-url>"
