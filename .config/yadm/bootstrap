#!/usr/bin/env bash

# yadm bootstrap script
# This script runs once after yadm clone or yadm bootstrap
# It sets up a complete development environment

set -e # Exit immediately if a command exits with a non-zero status
set -u # Exit if an unset variable is used
set -o pipefail

# Colors for better output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
log_info() {
  echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
  echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warn() {
  echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
  echo -e "${RED}[ERROR]${NC} $1"
}

# Detect operating system
OS="$(uname -s)"
log_info "Detected OS: $OS"

# Install packages from Brewfile
log_info "Installing packages from Brewfile..."
brew bundle --file="$HOME/.config/homebrew/Brewfile"
log_success "Packages installed successfully!"

# Setup Starship prompt
if command -v starship &> /dev/null; then
  log_info "Setting up Starship prompt..."
  mkdir -p ~/.config
  starship preset plain-text-symbols > ~/.config/starship.toml
  log_success "Starship prompt configured!"
fi

# Create local bin directory if it doesn't exist
if [ ! -d "$HOME/.local/bin" ]; then
  log_info "Creating ~/.local/bin directory..."
  mkdir -p "$HOME/.local/bin"
  log_info "PATH to ~/.local/bin is already set in ~/.zshenv"
  log_success "Local bin directory created!"
fi

# Function for handling SSH key generation and setup
handle_ssh_key() {
  local key_path="$1"
  local key_name="$2"
  local host_alias="$3"
  local key_comment="$4"
  
  # Generate key if it doesn't exist
  if [ ! -f "$key_path" ]; then
    log_info "No $key_name SSH key found, generating one..."
    ssh-keygen -t ed25519 -C "$key_comment" -f "$key_path" -N ""
    chmod 600 "$key_path"
    chmod 644 "${key_path}.pub"
    log_success "$key_name SSH key generated!"
  fi
  
  # Display and copy key
  log_info "Add your $key_name SSH key to GitHub:"
  echo ""
  cat "${key_path}.pub"
  echo ""
  
  # Copy key to clipboard based on available tools
  if command -v xclip &> /dev/null; then
    xclip -selection clipboard < "${key_path}.pub"
    log_success "$key_name key copied to clipboard using xclip!"
  elif command -v pbcopy &> /dev/null; then
    pbcopy < "${key_path}.pub"
    log_success "$key_name key copied to clipboard using pbcopy!"
  else
    log_warn "No clipboard tool found. Please manually copy the $key_name key shown above."
    log_info "Tip: Run 'brew bundle --file=\"$HOME/.config/homebrew/Brewfile\"' to install clipboard tools."
  fi
  
  log_info "Add this $key_name key to GitHub: https://github.com/settings/ssh/new"
  read -p "Press Enter after adding the $key_name key to GitHub (or Ctrl+C to skip this step)..."
  
  # Test SSH connection
  log_info "Testing SSH connection to GitHub with $key_name key..."
  echo "Command output (you may see locale warnings that can be safely ignored):"
  echo "-----------------------------------------------------------------"
  
  # Temporarily disable exit on error for the SSH test
  set +e
  # Run SSH test and capture the complete output
  ssh -T -o StrictHostKeyChecking=accept-new git@$host_alias 2>&1
  set -e  # Re-enable exit on error
  
  echo "-----------------------------------------------------------------"
  log_info "GitHub typically responds with a message containing 'successfully authenticated'"
  log_info "Even if you see locale warnings, the connection is successful if that message appears"
  echo ""
  read -p "Press Enter to continue..."
}

# Handle SSH directory and config permissions
if [ ! -d "$HOME/.ssh" ]; then
  mkdir -p "$HOME/.ssh"
  log_info "Created missing ~/.ssh directory"
fi
chmod 700 "$HOME/.ssh"  # Ensure correct permissions

# Ensure the SSH config has proper permissions
if [ -f "$HOME/.ssh/config" ]; then
  chmod 600 "$HOME/.ssh/config"
  log_info "SSH config found, permissions set to 600"
fi

# SSH config explanation
log_info "Found SSH config with support for multiple GitHub accounts"
log_info "- Primary account: git clone git@github.com:username/repo.git"
log_info "- Secondary account: git clone git@github-2:username/repo.git"

# Handle primary key
handle_ssh_key "$HOME/.ssh/id_ed25519" "PRIMARY" "github.com" "primary@$(hostname)"

# Handle secondary key
handle_ssh_key "$HOME/.ssh/id_ed25519-2" "SECONDARY" "github-2" "secondary@$(hostname)"

log_info "SSH setup complete! You can now use different GitHub accounts:"
log_info "- Primary: git clone git@github.com:username/repo.git"
log_info "- Secondary: git clone git@github-2:username/repo.git"


# Complete bootstrap with instructions for switching to zsh
log_success "Bootstrap completed successfully!"

# Get path to Homebrew zsh
BREW_ZSH="$(which zsh)"

# Create the full command to properly set up zsh
SETUP_ZSH_CMD="echo \"$BREW_ZSH\" | sudo tee -a /etc/shells && chsh -s \"$BREW_ZSH\" && echo 'Shell changed! Start a new terminal or run: exec zsh -l'"

# Display instructions
echo ""
echo "======================================================================"
echo "To complete your setup, zsh needs to be added to approved shells"
echo "and set as your default shell."
echo ""
echo "Run this command (copied to your clipboard):"
echo ""
echo "  $SETUP_ZSH_CMD"
echo ""
echo "======================================================================"

# Copy to clipboard based on available tools
if command -v pbcopy &> /dev/null; then
    echo "$SETUP_ZSH_CMD" | pbcopy
    echo "✓ Command copied to clipboard!"
elif command -v xclip &> /dev/null; then
    echo "$SETUP_ZSH_CMD" | xclip -selection clipboard
    echo "✓ Command copied to clipboard!"
else
    echo "⚠ No clipboard tool found - please copy the command manually."
fi

# For the current session, switch to zsh if available
if command -v zsh &> /dev/null; then
    echo ""
    echo "Switching current session to zsh..."
    exec zsh
fi
